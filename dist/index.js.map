{"version":3,"file":"index.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;ACVA;AACA;AACA;;AAEA;AACA;AACA;AACiF;AAClE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4CAA4C,kFAAsB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,gBAAgB;AACzF;AACA;AACA,mEAAmE,gBAAgB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;ACpLA;AACgE;AACJ;AACI;AACA;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gEAAuB;AAChD;AACA;AACA;AACA;AACA,yBAAyB,8DAAqB;AAC9C;AACA;AACA;AACA;AACA,yBAAyB,gEAAuB;AAChD;AACA;AACA;AACA;AACA,uBAAuB,gEAAuB;AAC9C;AACA;AACA;AACA;AACA,iEAAe,sBAAsB,EAAC;;;;;;;;;;;;AC/B5B;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,qBAAqB,EAAC;;;;;;;;;;;;;;;AC1BrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;AC3BvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;ACxBvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;ACzCE;AACC;AACL;AACG;AACE;AACA;AACA;;;;;;;UCN1C;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0C;AACL","sources":["webpack://jsap-editor/webpack/universalModuleDefinition","webpack://jsap-editor/./src/BasePluginEditorChannel.ts","webpack://jsap-editor/./src/ParameterListeners/EditorParameterManager.ts","webpack://jsap-editor/./src/ParameterListeners/IEditorParameterManager.ts","webpack://jsap-editor/./src/ParameterListeners/IParameterListener.ts","webpack://jsap-editor/./src/ParameterListeners/ListParameterListener.ts","webpack://jsap-editor/./src/ParameterListeners/NumberParameterListener.ts","webpack://jsap-editor/./src/ParameterListeners/StringParameterListener.ts","webpack://jsap-editor/./src/ParameterListeners/SwitchParameterListener.ts","webpack://jsap-editor/./src/ParameterListeners/index.ts","webpack://jsap-editor/webpack/bootstrap","webpack://jsap-editor/webpack/runtime/define property getters","webpack://jsap-editor/webpack/runtime/hasOwnProperty shorthand","webpack://jsap-editor/webpack/runtime/make namespace object","webpack://jsap-editor/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsap-editor\"] = factory();\n\telse\n\t\troot[\"jsap-editor\"] = factory();\n})(this, function() {\nreturn ","// jshint esversion: 6\n/*\n    JSAP Plugin GUI Channel object\n\n    This object helps to abstract the various communication platforms in JSAP\n    between the plugin processor (BasePlugin) and the GUI on top.\n*/\nimport EditorParameterManager from \"./ParameterListeners/EditorParameterManager\";\nexport default class BasePluginEditorChannel {\n    constructor() {\n        this.unique_id = (function (len) {\n            function dec2hex(dec) {\n                return ('0' + dec.toString(16)).substr(-2);\n            }\n            var arr = new Uint8Array((len || 40) / 2);\n            window.crypto.getRandomValues(arr);\n            return Array.from(arr, dec2hex).join('');\n        })(32);\n        this.onparameterListeners = [];\n        this.onlisteners = [];\n        this.statelisteners = [];\n        this.parameterListenerManager = new EditorParameterManager(this);\n        if (window.opener) {\n            // We are a popout window\n            this.hostWindow = window.opener;\n        }\n        else if (window.parent) {\n            this.hostWindow = window.parent;\n        }\n        window.onmessage = function (e) {\n            if (e.source != this.hostWindow) {\n                return;\n            }\n            if (e.data.sender_id == this.unique_id) {\n                return;\n            }\n            let customEvent;\n            switch (e.data.message) {\n                case \"updateParameters\":\n                    customEvent = new CustomEvent(\"parametersChanged\", { detail: e.data });\n                    break;\n                case \"updateState\":\n                    customEvent = new CustomEvent(\"updateState\", { detail: e.data });\n                    break;\n                default:\n                    return;\n            }\n            window.dispatchEvent(customEvent);\n        };\n        window.addEventListener(\"parametersChanged\", (e) => {\n            if (e.detail.parameters) {\n                Object.keys(e.detail.parameters).forEach((name) => {\n                    const listeners = this.onparameterListeners.filter((l) => {\n                        return l.name.toLowerCase() == name.toLowerCase() || l.name === undefined;\n                    });\n                    listeners.forEach((l) => {\n                        l.callback(e.detail.parameters[name]);\n                    });\n                });\n                this.onlisteners.forEach((callback) => {\n                    callback(e.detail.parameters);\n                });\n            }\n        });\n        window.addEventListener(\"updateState\", (e) => {\n            this.statelisteners.filter((listener) => {\n                return (listener.level == e.detail.level) && (listener.term == e.detail.term);\n            }).forEach(function (listener) {\n                listener.callback(e.detail.value);\n            });\n        });\n    }\n    postMessage(object) {\n        if (object === undefined || object.message === undefined) {\n            throw (\"Malformed message object\");\n        }\n        object.sender_id = this.unique_id;\n        this.hostWindow.postMessage(object, window.location.origin);\n    }\n    get pluginInstance() { return window.pluginInstance; }\n    setParameterByName(name, value) {\n        if (typeof name != \"string\") {\n            throw (\"Expects parameter name to be a string\");\n        }\n        this.postMessage({\n            message: \"setParameterByName\",\n            parameter: {\n                name: name,\n                value: value\n            }\n        });\n    }\n    setParametersByObject(object) {\n        postMessage({\n            message: \"setParametersByObject\",\n            parameters: object\n        });\n    }\n    requestParameters() {\n        postMessage({\n            message: \"requestParameters\"\n        });\n    }\n    requestParameterByName(name) {\n        if (typeof name == \"string\") {\n            postMessage({\n                message: \"requestParameters\",\n                name: name\n            });\n        }\n        else {\n            throw (\"Name not set\");\n        }\n    }\n    listenForParameterByName(callback, name, triggerRequest) {\n        if (callback === undefined || typeof callback != \"function\") {\n            throw (\"Callback must be a defined function\");\n        }\n        this.onparameterListeners.push({\n            name: name,\n            callback: callback\n        });\n        if (triggerRequest !== false) {\n            postMessage({\n                message: \"requestParameters\",\n                name: name\n            });\n        }\n        return this.onparameterListeners.length;\n    }\n    listenForParameters(callback, triggerRequest) {\n        if (callback === undefined || typeof callback != \"function\") {\n            throw (\"Callback must be a defined function\");\n        }\n        this.onlisteners.push(callback);\n        if (triggerRequest !== false) {\n            postMessage({\n                message: \"requestParameters\"\n            });\n        }\n        return this.onlisteners.length;\n    }\n    listenForState(callback, level, term, triggerRequest) {\n        if (callback === undefined || typeof callback != \"function\") {\n            throw (\"Callback must be a defined function\");\n        }\n        if (level != \"session\" && level != \"track\" && level != \"user\" && level != \"plugin\") {\n            throw \"Invalid state level given: \" + String(level);\n        }\n        this.statelisteners.push({\n            level: level,\n            term: term,\n            callback: callback\n        });\n        if (triggerRequest !== false) {\n            this.requestState(level, term);\n        }\n        return this.statelisteners.length;\n    }\n    requestState(level, term) {\n        const message = \"request\" + level.charAt(0).toUpperCase() + level.slice(1) + \"State\";\n        if (typeof name == \"string\") {\n            postMessage({\n                message: message,\n                term: term\n            });\n        }\n        else {\n            throw (\"Name not set\");\n        }\n    }\n    sendCustomEvent(type, payload) {\n        postMessage({\n            message: \"customMessage\",\n            detail: {\n                type: type,\n                payload: payload\n            }\n        });\n    }\n}\n","/*jshint esversion: 6 */\nimport NumberParameterListener from \"./NumberParameterListener\";\nimport ListParameterListener from \"./ListParameterListener\";\nimport StringParameterListener from \"./StringParameterListener\";\nimport SwitchParameterListener from \"./SwitchParameterListener\";\nclass EditorParameterManager {\n    constructor(channel) {\n        this.channel = channel;\n        this.parameters = [];\n    }\n    createNumberParameterListener(parameterName, visibleName, defaultValue, maximum, minimum) {\n        const node = new NumberParameterListener(this, this.channel, parameterName, visibleName, defaultValue, maximum, minimum);\n        this.parameters.push(node);\n        return node;\n    }\n    createListParameterListener(parameterName, visibleName, defaultValue, listValues) {\n        const node = new ListParameterListener(this, this.channel, parameterName, visibleName, defaultValue, listValues);\n        this.parameters.push(node);\n        return node;\n    }\n    createStringParameterListener(parameterName, visibleName, defaultValue, maximumLength) {\n        const node = new StringParameterListener(this, this.channel, parameterName, visibleName, defaultValue, maximumLength);\n        this.parameters.push(node);\n        return node;\n    }\n    createSwitchParameterListener(parameterName, visibleName, defaultValue, maxState, minState) {\n        var node = new SwitchParameterListener(this, this.channel, parameterName, visibleName, defaultValue, maxState, minState);\n        this.parameters.push(node);\n        return node;\n    }\n}\nexport default EditorParameterManager;\n","export {};\n","export {};\n","/*jshint esversion: 6 */\nclass ListParameterListener {\n    constructor(owner, channel, parameterName, visibleName, defaultValue, listValues) {\n        this.owner = owner;\n        this.channel = channel;\n        this.parameterName = parameterName;\n        this.visibleName = visibleName;\n        this.defaultValue = defaultValue;\n        this.listValues = listValues;\n        this._value = this.defaultValue;\n        this.channel.listenForParameterByName((e) => {\n            if (this.listValues.includes(e.value)) {\n                this._value = e.value;\n            }\n        }, parameterName, true);\n    }\n    update(value) {\n        this.channel.setParameterByName(this.parameterName, value);\n    }\n    get value() { return this._value; }\n    set value(v) {\n        if (this.listValues.includes(v)) {\n            this._value = v;\n        }\n    }\n}\nexport default ListParameterListener;\n","/*jshint esversion: 6 */\nclass NumberParameterListener {\n    constructor(owner, channel, parameterName, visibleName, defaultValue, maximum, minimum) {\n        this.owner = owner;\n        this.channel = channel;\n        this.parameterName = parameterName;\n        this.visibleName = visibleName;\n        this.defaultValue = defaultValue;\n        this.maximum = maximum;\n        this.minimum = minimum;\n        this._value = this.defaultValue;\n        this.channel.listenForParameterByName((e) => {\n            if (typeof e.value === 'number') {\n                this.value = e.value;\n            }\n        }, parameterName, true);\n    }\n    update(value) {\n        this.channel.setParameterByName(this.parameterName, value);\n    }\n    get value() { return this._value; }\n    set value(v) {\n        if (typeof v === \"number\") {\n            this._value = Math.max(this.minimum, Math.min(this.maximum, v));\n        }\n    }\n}\nexport default NumberParameterListener;\n","/*jshint esversion: 6 */\nclass StringParameterListener {\n    constructor(owner, channel, parameterName, visibleName, defaultValue, maximumLength) {\n        this.owner = owner;\n        this.channel = channel;\n        this.parameterName = parameterName;\n        this.visibleName = visibleName;\n        this.defaultValue = defaultValue;\n        this.maximumLength = maximumLength;\n        this._value = this.defaultValue;\n        this.channel.listenForParameterByName((e) => {\n            this.value = e.value;\n        }, parameterName, true);\n    }\n    update(value) {\n        this.channel.setParameterByName(this.parameterName, value);\n    }\n    get value() { return this._value; }\n    set value(v) {\n        if (typeof v === \"string\") {\n            this._value = v;\n        }\n    }\n}\nexport default StringParameterListener;\n","/*jshint esversion: 6 */\nclass SwitchParameterListener {\n    constructor(owner, channel, parameterName, visibleName, defaultValue, minState, maxState) {\n        this.owner = owner;\n        this.channel = channel;\n        this.parameterName = parameterName;\n        this.visibleName = visibleName;\n        this.defaultValue = defaultValue;\n        this.minState = minState;\n        this.maxState = maxState;\n        this._value = this.defaultValue;\n        this.channel.listenForParameterByName((e) => {\n            this.value = e.value;\n        }, parameterName, true);\n    }\n    update(value) {\n        this.channel.setParameterByName(this.parameterName, value);\n    }\n    increment() {\n        let v = this.value + 1;\n        if (v > this.maxState) {\n            v = this.minState;\n        }\n        this.value = v;\n        return this.value;\n    }\n    decrement() {\n        var v = this.value - 1;\n        if (v < this.minState) {\n            v = this.maxState;\n        }\n        this.value = v;\n        return this.value;\n    }\n    get value() { return this._value; }\n    set value(v) {\n        if (typeof v === \"number\") {\n            this.value = Math.max(this.minState, Math.min(this.maxState, v));\n        }\n    }\n}\nexport default SwitchParameterListener;\n","export * from './EditorParameterManager';\nexport * from './IEditorParameterManager';\nexport * from './IParameterListener';\nexport * from './ListParameterListener';\nexport * from './NumberParameterListener';\nexport * from './StringParameterListener';\nexport * from './SwitchParameterListener';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from './BasePluginEditorChannel';\nexport * from './ParameterListeners';\n"],"names":[],"sourceRoot":""}